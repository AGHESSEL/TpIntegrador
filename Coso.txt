public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            cargarLista(lstViaje, "Viaje"); //el nombre de la tabla igual a la base de datos
            cargarCombo(cboTransporte, "Transporte"); //el nombre de la tabla igual a la base de datos
            habilitar(false); // deshabilitar los botones segun convenga
            txtCodigo.Enabled = false; // deshabilitar la carga de codigo, implementado un contador automatico
        }

        public void cargarLista(ListBox lista, string nombreTabla)
        {
            AccesoDatos datos = new AccesoDatos(cadenaConexion);
            datos.leerTabla(nombreTabla);
            lv.Clear();

            while (datos.pLector.Read())
            {
                Viaje v = new Viaje();

                if (!datos.pLector.IsDBNull(0))
                    v.pCodigo = datos.pLector.GetInt32(0);
                if (!datos.pLector.IsDBNull(1))
                    v.pDestino = datos.pLector.GetString(1);
                if (!datos.pLector.IsDBNull(2))
                    v.pTransporte = datos.pLector.GetInt32(2);
                if (!datos.pLector.IsDBNull(3))
                    v.pTipo = datos.pLector.GetInt32(3);
                if (!datos.pLector.IsDBNull(4))
                    v.pFecha = datos.pLector.GetDateTime(4);

                lv.Add(v);
            }

            datos.pLector.Close();
            datos.desconectar();

            lstViaje.Items.Clear();
            lstViaje.Items.AddRange(lv.ToArray());
            lstViaje.SelectedIndex = 0;
        }

        public void cargarCombo(ComboBox combo, string nombreTabla)
        {
            AccesoDatos datos = new AccesoDatos(cadenaConexion);
            DataTable tabla = new DataTable();
            tabla = datos.consultarTabla(nombreTabla);
            combo.DataSource = tabla;
            combo.ValueMember = tabla.Columns[0].ColumnName;
            combo.DisplayMember = tabla.Columns[1].ColumnName;
            combo.SelectedIndex = -1;
        }

        

        public void cargarCampos(int posicion)
        {
            if (posicion < lv.Count)
            {
                txtCodigo.Text = lv[posicion].pCodigo.ToString();
                txtDestino.Text = lv[posicion].pDestino;
                cboTransporte.SelectedValue = lv[posicion].pTransporte;
                if (lv[posicion].pTransporte == 1)
                    rdbNacional.Checked = true;
                else
                    rdbInternacionl.Checked = true;
                dtpFecha.Value = lv[posicion].pFecha;
            }

          
        }

        private void habilitar(bool x)
        {
            txtDestino.Enabled = x;
            cboTransporte.Enabled = x;
            rdbInternacionl.Enabled = x;
            rdbNacional.Enabled = x;
            dtpFecha.Enabled = x;
            btnBorrar.Enabled = x;
            btnGrabar.Enabled = x;
            btnNuevo.Enabled = !x;
        }

        private bool existe(int pk)
        {
            for (int i = 0; i < lv.Count; i++)
            {
                if (lv[i].pCodigo == pk)
                    return true;
            }
            return false;
        }

        private void limpiar()
        {
            txtCodigo.Text = "";
            txtDestino.Text = "";
            cboTransporte.SelectedIndex = -1;
            rdbNacional.Checked = false;
            rdbInternacionl.Checked = false;
            dtpFecha.Value = DateTime.Today;
        }

        private void lstViaje_SelectedIndexChanged(object sender, EventArgs e)
        {
            cargarCampos(lstViaje.SelectedIndex);
            habilitar(true);
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (MessageBox.Show("¿Desea salir?", "Salir", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.Yes)
                e.Cancel = false;
            else
                e.Cancel = true;                       
        }

        private void btnNuevo_Click(object sender, EventArgs e)
        {
            limpiar();
            txtCodigo.Text = (lv.Count + 1).ToString(); 
            habilitar(true);
        }

        private void btnGrabar_Click(object sender, EventArgs e)
        {
            Viaje v = new Viaje();
            v.pCodigo = Convert.ToInt32(txtCodigo.Text);
            v.pDestino = txtDestino.Text;
            v.pTransporte = Convert.ToInt32(cboTransporte.SelectedValue);
            if (rdbNacional.Checked)
                v.pTipo = 1;
            else
                v.pTipo = 2;
            v.pFecha = dtpFecha.Value;

            if (!existe(v.pCodigo))
                v.cargarViaje(cadenaConexion);
            else
                v.actualizarViaje(cadenaConexion);
            cargarLista(lstViaje, "Viaje");
        }

        private void btnBorrar_Click(object sender, EventArgs e)
        {
            DialogResult atencion = MessageBox.Show("Va a borrar el registro seleccionado. \n ¿Continuar?", "Borrar", MessageBoxButtons.YesNo, MessageBoxIcon.Warning, MessageBoxDefaultButton.Button2);
            if (atencion == DialogResult.Yes)
            {
                Viaje v = new Viaje();
                v.pCodigo = Convert.ToInt32(txtCodigo.Text);
                v.borrarViaje(cadenaConexion);
                cargarLista(lstViaje, "Viaje");
            }
            else
                habilitar(false);

           
        }

        private void btnCancelar_Click(object sender, EventArgs e)
        {
            limpiar();
            cargarLista(lstViaje, "Viaje");
            habilitar(false);
        }

        private void btnSalir_Click(object sender, EventArgs e)
        {
            Close();
        }

        
    }